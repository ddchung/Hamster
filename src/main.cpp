#include <platform/platform.hpp>
#include <memory/allocator.hpp>
#include <memory/memory_space.hpp>
#include <process/riscv_rv32i_thread.hpp>
#include <process/thread_type_manager.hpp>
#include <elf/elf_loader.hpp>
#include <filesystem/vfs.hpp>
#include <filesystem/ramfs.hpp>

void test_platform();
void test_memory();
void test_filesystem();
void test_process();

int main()
{
  Hamster::_init_platform();

  Hamster::_log("Testing Platform...\n");
  test_platform();
  Hamster::_log("Done\n");

  Hamster::_log("Testing Memory...\n");
  test_memory();
  Hamster::_log("Done\n");

  Hamster::_log("Testing Filesystem...\n");
  test_filesystem();
  Hamster::_log("Done\n");

  Hamster::_log("Testing Process...\n");
  test_process();
  Hamster::_log("Done\n");

  // Test RISC-V RV32I Thread
  Hamster::MemorySpace mem_space;

  // Note: This program was compiled with RISC-V GCC, built from
  // crosstool-ng
  // Program is below.
  /*
  int syscall0(int syscall)
  {
      int ret;
      asm volatile(
          "mv a7, %1\n"
          "ecall\n"
          "mv %0, a0"
          : "=r"(ret)
          : "r"(syscall)
          : "a7", "a0"
      );
      return ret;
  }

  int syscall1(int syscall, int arg1)
  {
      int ret;
      asm volatile(
          "mv a7, %1\n"
          "mv a0, %2\n"
          "ecall\n"
          "mv %0, a0"
          : "=r"(ret)
          : "r"(syscall), "r"(arg1)
          : "a7", "a0"
      );
      return ret;
  }

  int main(void);

  void _start()
  {
      // Startup code
      
      int i = main();
      syscall1(0, i); // Exit syscall
  }

  int main(void)
  {
      int i = syscall0(1);
      return i;
  }
  */
  unsigned char elf[1164] =
{
	0x7f, 0x45, 0x4c, 0x46, 0x01, 0x01, 0x01, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0xf3, 0x00, 0x01, 0x00, 0x00, 0x00, 
	0x04, 0x01, 0x01, 0x00, 0x34, 0x00, 0x00, 0x00, 
	0x74, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x34, 0x00, 0x20, 0x00, 0x03, 0x00, 0x28, 0x00, 
	0x07, 0x00, 0x06, 0x00, 0x03, 0x00, 0x00, 0x70, 
	0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
	0x00, 0x00, 0x01, 0x00, 0x34, 0x01, 0x00, 0x00, 
	0x34, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 
	0x00, 0x10, 0x00, 0x00, 0x51, 0xe5, 0x74, 0x64, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 
	0x10, 0x00, 0x00, 0x00, 0x93, 0x07, 0x10, 0x00, 
	0x93, 0x88, 0x07, 0x00, 0x73, 0x00, 0x00, 0x00, 
	0x93, 0x07, 0x05, 0x00, 0x13, 0x85, 0x07, 0x00, 
	0x67, 0x80, 0x00, 0x00, 0x93, 0x07, 0x05, 0x00, 
	0x93, 0x88, 0x07, 0x00, 0x73, 0x00, 0x00, 0x00, 
	0x93, 0x07, 0x05, 0x00, 0x13, 0x85, 0x07, 0x00, 
	0x67, 0x80, 0x00, 0x00, 0x93, 0x07, 0x05, 0x00, 
	0x93, 0x88, 0x07, 0x00, 0x13, 0x85, 0x05, 0x00, 
	0x73, 0x00, 0x00, 0x00, 0x93, 0x07, 0x05, 0x00, 
	0x13, 0x85, 0x07, 0x00, 0x67, 0x80, 0x00, 0x00, 
	0x93, 0x07, 0x05, 0x00, 0x13, 0x87, 0x05, 0x00, 
	0x93, 0x88, 0x07, 0x00, 0x13, 0x05, 0x07, 0x00, 
	0x93, 0x05, 0x06, 0x00, 0x73, 0x00, 0x00, 0x00, 
	0x93, 0x07, 0x05, 0x00, 0x13, 0x85, 0x07, 0x00, 
	0x67, 0x80, 0x00, 0x00, 0x13, 0x01, 0x01, 0xff, 
	0x23, 0x26, 0x11, 0x00, 0xef, 0xf0, 0x9f, 0xf8, 
	0x13, 0x07, 0x05, 0x00, 0x93, 0x07, 0x00, 0x00, 
	0x93, 0x88, 0x07, 0x00, 0x13, 0x05, 0x07, 0x00, 
	0x73, 0x00, 0x00, 0x00, 0x93, 0x07, 0x05, 0x00, 
	0x83, 0x20, 0xc1, 0x00, 0x13, 0x01, 0x01, 0x01, 
	0x67, 0x80, 0x00, 0x00, 0x47, 0x43, 0x43, 0x3a, 
	0x20, 0x28, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x74, 
	0x6f, 0x6f, 0x6c, 0x2d, 0x4e, 0x47, 0x20, 0x31, 
	0x2e, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x34, 0x34, 
	0x5f, 0x37, 0x38, 0x36, 0x39, 0x66, 0x64, 0x62, 
	0x29, 0x20, 0x31, 0x35, 0x2e, 0x31, 0x2e, 0x30, 
	0x00, 0x41, 0x1b, 0x00, 0x00, 0x00, 0x72, 0x69, 
	0x73, 0x63, 0x76, 0x00, 0x01, 0x11, 0x00, 0x00, 
	0x00, 0x04, 0x10, 0x05, 0x72, 0x76, 0x33, 0x32, 
	0x69, 0x32, 0x70, 0x31, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x94, 0x00, 0x01, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x02, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xf1, 0xff, 
	0x08, 0x00, 0x00, 0x00, 0xac, 0x00, 0x01, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
	0x08, 0x00, 0x00, 0x00, 0x94, 0x00, 0x01, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
	0x13, 0x00, 0x00, 0x00, 0x34, 0x19, 0x01, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0xf1, 0xff, 
	0x25, 0x00, 0x00, 0x00, 0xac, 0x00, 0x01, 0x00, 
	0x18, 0x00, 0x00, 0x00, 0x12, 0x00, 0x01, 0x00, 
	0x2e, 0x00, 0x00, 0x00, 0x34, 0x11, 0x01, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 
	0x3e, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x01, 0x00, 
	0x24, 0x00, 0x00, 0x00, 0x12, 0x00, 0x01, 0x00, 
	0x58, 0x00, 0x00, 0x00, 0x04, 0x01, 0x01, 0x00, 
	0x30, 0x00, 0x00, 0x00, 0x12, 0x00, 0x01, 0x00, 
	0x47, 0x00, 0x00, 0x00, 0x34, 0x11, 0x01, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 
	0x53, 0x00, 0x00, 0x00, 0x34, 0x11, 0x01, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 
	0x5f, 0x00, 0x00, 0x00, 0x94, 0x00, 0x01, 0x00, 
	0x18, 0x00, 0x00, 0x00, 0x12, 0x00, 0x01, 0x00, 
	0x64, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x01, 0x00, 
	0x1c, 0x00, 0x00, 0x00, 0x12, 0x00, 0x01, 0x00, 
	0x6d, 0x00, 0x00, 0x00, 0x34, 0x11, 0x01, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 
	0x7c, 0x00, 0x00, 0x00, 0x34, 0x11, 0x01, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 
	0x83, 0x00, 0x00, 0x00, 0x34, 0x11, 0x01, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 
	0x00, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x63, 0x00, 
	0x24, 0x78, 0x72, 0x76, 0x33, 0x32, 0x69, 0x32, 
	0x70, 0x31, 0x00, 0x5f, 0x5f, 0x67, 0x6c, 0x6f, 
	0x62, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 
	0x74, 0x65, 0x72, 0x24, 0x00, 0x73, 0x79, 0x73, 
	0x63, 0x61, 0x6c, 0x6c, 0x30, 0x00, 0x5f, 0x5f, 
	0x53, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x42, 0x45, 
	0x47, 0x49, 0x4e, 0x5f, 0x5f, 0x00, 0x73, 0x79, 
	0x73, 0x63, 0x61, 0x6c, 0x6c, 0x32, 0x00, 0x5f, 
	0x5f, 0x42, 0x53, 0x53, 0x5f, 0x45, 0x4e, 0x44, 
	0x5f, 0x5f, 0x00, 0x5f, 0x5f, 0x62, 0x73, 0x73, 
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x6d, 
	0x61, 0x69, 0x6e, 0x00, 0x73, 0x79, 0x73, 0x63, 
	0x61, 0x6c, 0x6c, 0x31, 0x00, 0x5f, 0x5f, 0x44, 
	0x41, 0x54, 0x41, 0x5f, 0x42, 0x45, 0x47, 0x49, 
	0x4e, 0x5f, 0x5f, 0x00, 0x5f, 0x65, 0x64, 0x61, 
	0x74, 0x61, 0x00, 0x5f, 0x65, 0x6e, 0x64, 0x00, 
	0x00, 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 
	0x00, 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 
	0x00, 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 
	0x61, 0x62, 0x00, 0x2e, 0x74, 0x65, 0x78, 0x74, 
	0x00, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 
	0x74, 0x00, 0x2e, 0x72, 0x69, 0x73, 0x63, 0x76, 
	0x2e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 
	0x74, 0x65, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 
	0x94, 0x00, 0x01, 0x00, 0x94, 0x00, 0x00, 0x00, 
	0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x34, 0x01, 0x00, 0x00, 
	0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 
	0x03, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x61, 0x01, 0x00, 0x00, 
	0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 
	0x30, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 
	0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
	0x10, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xb0, 0x02, 0x00, 0x00, 
	0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x38, 0x03, 0x00, 0x00, 
	0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 
};

  Hamster::vfs.mount("/", Hamster::alloc<Hamster::RamFs>());

  // Write ELF file to file
  int f = Hamster::vfs.mkfile("/test.elf", O_RDWR, 0777);
  if (f < 0)
  {
    printf("Failed to create file\n");
    return -1;
  }

  Hamster::vfs.write(f, elf, sizeof(elf));
  Hamster::vfs.close(f);

  uint64_t entry_point = 0;
  uint64_t iterations = 0;
  f = Hamster::vfs.open("/test.elf", O_RDONLY);
  if (f < 0)
  {
    printf("Failed to open file\n");
    return -1;
  }
  auto thread = Hamster::thread_type_manager.load_elf(f, mem_space);
  Hamster::vfs.close(f);

  while (true)
  {
    int ret = thread->tick();
	++iterations;
    if (ret == 0)
      continue;
    if (ret < 0)
    {
      printf("Thread exited with error code %d\n", ret);
      break;
    }
    if (ret == 2)
    {
      // System call
      auto syscall = thread->get_syscall();
      if (syscall.syscall_num == 0)
      {
        printf("Thread exited with code %lu\n", syscall.arg1);
        break;
      }
      if (syscall.syscall_num == 1)
      {
        printf("getting 12345\n");
        // return 12345
        thread->set_syscall_ret(12345);
        continue;
      }
      else
      {
        printf("Unknown syscall %lu\n", syscall.syscall_num);
        continue;
      }
    }
  }

  printf("Iterations: %lu\n", iterations);

  Hamster::dealloc(thread);
}
